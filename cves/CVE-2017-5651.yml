CVE: CVE-2017-5651

nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname: Using a used processor

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 672

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true

reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 2017-03-24

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2017-04-10

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  In certain versions of Apache Tomcat, a refactoring of one of the subsystems
  introduced a vulnerability in processing that occurs when a file is sent. If
  the processing completes too quickly, the processor object used could be added
  to a cache of "recycled" processors twice. This might cause the same processor
  object to be used to process multiple requests, which in turn could lead to
  unexpected errors, response mix-up, and can be exploited to disclose hidden
  information.

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs: []
fixes_vcc_instructions: |
  Please put the Git commit SHA in "commit" below, and any notes about how this
  was discovered in the "note" field.
  Refer to our instructions on how to find a Git SHA from an SVN revision.
fixes:
   - commit: 9233d9d6a018be4415d4d7d6cb4fe01176adf1a8
     note: SVN rev 1788544, from the Tomcat website.
   - commit: 494429ca210641b6b7affe89a2b0a6c0ff70109b
     note: SVN rev 1788546, from the Tomcat website.
vccs:
  - commit: SVN revision 1654324
    note: This commit is one of the refactor commits, the one that modified the
    file where the vulnerability was. Could not find commit hash on github

incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability?
  Please list any fix commits for this vulnerability that had to be corrected
  at a later date.
incomplete_fixes:
  - commit:
    note:
  - commit:
    note:

upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 4

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: There do exist unit tests for the Http11Processor class in the
    affected versions, but they do not seem to be involved in the vulnerability.
    The fix did not involve modifying any unit tests and no unit tests were
    changed after the fix as a result. The fix involved changes to the
    Http11Processor class that did not require any changes to the unit tests.
  code: true
  fix: false

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found.
    * Answer in longform below in "answer"
    * Fill in the date in YYYY-MM-DD
    * If it's clear that the vulnerability was discovered by a contest,
      fill in the name there.
    * The "automated" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you
    may leave the entries blank except for "answer", BUT please write down
    where you looked in "answer".
  answer: A bug (BugZilla bug 60918) was found by a developer named Andrew
    Garland who was using one of the affected modules. They reported the bug
    which caused this vulnerability along with debug logs that allowed the bug
    to be quickly patched.
  date: 2017-03-24
  automated: false
  contest:

subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
    Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: The bug was in the Coyote HTTP connector subsystem.
  name: coyote

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this
    section by explaining what happened between the VCCs and the fix.
  answer: |
    The refactoring that created the vulnerability occured years before
    the vulnerability was actually found. Therefore there are many, many changes
    that occur between the VCC and the fixes, none of which are particularly
    interesting.
  commits:
    - commit:
      note:
    - commit:
      note:

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: false
    note:
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: false
    note:
  yagni:
    applies: true
    note: |
      This vulnerability occurred because the developer refactoring the system
      assumed only certain states were necessary to be tracked, leading to
      insufficient information to catch the error that leads the vulnerability.
      The fix that was added included adding additional state management logic
      that provides more detailed information. The vulnerability occured because
      they assumed they didnt need it, and the fix involved realizing they did.
  complex_inputs:
    applies: false
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This was a design mistake rather than an explicit coding mistake. The
    vulnerability is a result of scenario that was not considered during the
    refactoring of these systems. By not anticipating this scenario
    (the proccessing completing too quickly so the processor used is recycled
    twice) those who made the refactoring changes had a flaw in their design.
    The fix does look like it does the job, it makes use of a more verbose
    state-tracking system that gives more detail as to what the current state of
    the processor is, protecting against this issue. This is a good solution
    in my opinion because it also provides more detailed functionality to the
    class, by more closely tracking the state of the object, it is more clear
    what is happening which is useful in many circumstances (debugging,
    other systems that interact with these objects, etc.). It is also
    interesting that they elected not to implement another fix the bug reporter
    suggested which was to have some sort of safeguard in place near the actual
    recycledProcessors stack that ensures it does not contain duplicates. It is
    unclear why they elected not to use that fix. This vulnerability can be
    avoided in the future by simply keeping in mind the different timing
    sequences that can occur in this kind of asynchronous considered (what
    conditions cause some code to run before other code).
