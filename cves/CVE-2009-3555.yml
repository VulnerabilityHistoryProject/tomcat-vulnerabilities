CVE: CVE-2009-3555

nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname: Man in the Middle

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 300 Channel Accessible by Non-Endpoint ('Man-in-the-Middle')

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true

reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 2009-10-05

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2009-11-09

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: Regulation of the transfer of data within the network is open to
  "man-in-the-middle" remote attacks that allow the attacker to inject data into a 
  secure communication between two parties. The remote attacker can masquerade as 
  the original party that initiates this communication. This allows the 
  attacker to execute requests on behalf of the victim. Sensitive data may be
  compromised due to the inadequate or inconsistent verification of identities.
  In relation to Tomcat, Tomcat encrypts data along a communication channel between
  two parties. Tomcat supports renegotiation, which allows the user to interact with
  a system before authentication, then change their status to an authenticated user
  while also saving the user's activity, data, etc. The vulnerability comes in
  when a remote attacker intercepts the renegotiation and poses as the user. The 
  attacker is then able to modify the communication.

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty: 
  amt:
  announced: 
  url:
bugs: []
fixes_vcc_instructions: |
  Please put the Git commit SHA in "commit" below, and any notes about how this
  was discovered in the "note" field.
  Refer to our instructions on how to find a Git SHA from an SVN revision.
fixes:
  - commit: 359c7ee17f5759cc99988e1cc9e971fe4a6ffad5
    note: |
      SVN rev 904851, from the Tomcat website. This is in the Tomcat55 repo.
  - commit: c5e5a4f0e8d22c5419a7f10d4ccf8f8adc27ee51
    note: |
      SVN rev, 884998 from the Tomcat website. This is in the Tomcat55 repo,
      found by looking at the previous commit
vccs:
  - commit: 2ee172f418591edd61cfd3dc9676753b281d1fe2
    note: |
      This is the very first commit for the files affected by the CVE, which means
      the problem was initially brought into the system on this commit. In this commit
      files were added from a different version of the system. The revision number 
      for the VCC in the older version of the system is 297994.

incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability?
  Please list any fix commits for this vulnerability that had to be corrected
  at a later date.
incomplete_fixes:
  - commit: c5e5a4f0e8d22c5419a7f10d4ccf8f8adc27ee51
    note: |
      This commit was intended to fix the vulnerability by allowing the option of
      disabling renegotiations, but still allowed renegotiations to occur. This 
      means the problem was only half fixed.

upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: There were no automated unit tests found.
  code: false
  fix: false

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found.
    * Answer in longform below in "answer"
    * Fill in the date in YYYY-MM-DD
    * If it's clear that the vulnerability was discovered by a contest,
      fill in the name there.
    * The "automated" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you
    may leave the entries blank except for "answer", BUT please write down
    where you looked in "answer".
  answer: |
    There was no evidence as to how this vulnerability was found. I looked through
    the SVN revisions to see the discussion on the vulnerability and the Java Secure 
    Socket Extension
  date: First appearance was a proposal to fix CVE-2009-3555 on 2009-11-10
  automated: false
  contest: false

subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
    Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Java Secure Socket Extension (JSSE)
  name: jsse

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this
    section by explaining what happened between the VCCs and the fix.
  answer: 
  commits:
    - commit: 359c7ee17f5759cc99988e1cc9e971fe4a6ffad5
      note: They decided to disable all renegotiations instead of keeping it optional
    - commit: c5e5a4f0e8d22c5419a7f10d4ccf8f8adc27ee51
      note: |
        This commit was intended to fix the problem, but included an extra callback that can
        be intercepted by a remote attacker as well.

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies: True
    note: Native wrappers can safely perform necessary validation of the connection
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies: True
    note: SSL security protocol renegotiation seems to be unnecessary, and therefore disabled
  complex_inputs:
    applies:
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    The vulnerability was the product of a variety of mistakes. There seemed to be
    lack of testing for both commits mentioned above. Testing in general would ensure
    that something works the way it was intended to work. There were also coding mistakes
    that resulted in either end of the communications channel to not be fully authenticated.
    The design mistake that was potentially a factor could be that access for each entity 
    was not properly checked for authority.
