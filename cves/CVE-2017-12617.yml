CVE: CVE-2017-12617

nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname:

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 434

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true

reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 2017-09-20

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2017-09-21

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: This was a vulnerability that affected people who used Apache Tomcat
    versions 70, 80, 85, and 90. 
  
    The vulnerability allowed people to upload a Java Server Page (JSP) file to 
    a server if the Java servlet had HTTP put enabled and had a setting called 
    readonly set to false. A JSP file is written in Java and it allows the web 
    server to execute the code to produce HTML that the user sees. The file is 
    only able to get uploaded to the servlet if it is sent through a specially 
    crafted request.
  
    Users who request that file intentionally or unintentionally will cause the
    server to execute the code on the JSP file which can be malicious.

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs: [61542]
fixes_vcc_instructions: |
  Please put the Git commit SHA in "commit" below, and any notes about how this
  was discovered in the "note" field.
  Refer to our instructions on how to find a Git SHA from an SVN revision.
fixes:
   - commit: a9dd96046d7acb0357c6b7b9e6cc70d186fae663
     note: SVN rev 1809669, from the Tomcat website.
   - commit: c177e9668d1278710bdb14c0eb8d2702b3655f5a
     note: SVN rev 1809674, from the Tomcat website.
   - commit: e650cf1b83e441dbd3863f3f6b61c972cafce19e
     note: SVN rev 1809684, from the Tomcat website.
   - commit: 31e99502e2c602449a2f8835bd23ade772b77333
     note: SVN rev 1809711, from the Tomcat website.
   - commit: d5b170705d24c386d76038e5989045c89795c28c
     note: SVN rev 1809673, from the Tomcat website.
   - commit: 46dfedbc0523d7182be97f4244d7b6c942164485
     note: SVN rev 1809675, from the Tomcat website.
   - commit: 74ad0e216c791454a318c1811300469eedc5c6f3
     note: SVN rev 1809896, from the Tomcat website.
   - commit: bbcbb749c75056a2781f37038d63e646fe972104
     note: SVN rev 1809978, from the Tomcat website.
   - commit: cf0b37beb0622abdf24acc7110daf883f3fe4f95
     note: SVN rev 1809992, from the Tomcat website.
   - commit: fd52f8601170b91f9d7162510e54563e5bf6bdfe
     note: SVN rev 1810014, from the Tomcat website.
   - commit: 24aea94807f940ee44aa550378dc903289039ddd
     note: SVN rev 1810026, from the Tomcat website.
   - commit:
     note:
vccs:
  - commit: eae54419c6e196933998f63358367040edaa4a8c
    note: Initial development of the FileDirContext.java file.
  - commit:
    note:

incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability?
  Please list any fix commits for this vulnerability that had to be corrected
  at a later date.
incomplete_fixes:
  - commit:
    note:
  - commit:
    note:

upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 6

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: There were some unit testing involved for the code before the 
    vulnerability was known. Part of the revisions included additional code for 
    testing.
  code: true
  fix: true

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found.
    * Answer in longform below in "answer"
    * Fill in the date in YYYY-MM-DD
    * If it's clear that the vulnerability was discovered by a contest,
      fill in the name there.
    * The "automated" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you
    may leave the entries blank except for "answer", BUT please write down
    where you looked in "answer".
  answer: This vulnerability was basically an extension of a previous 
    vulnerability, CVE-2017-12615. There was a bypass for the fix for
    CVE-2017-12615, so another fix had to be introduced.
  date: 2017-09-20
  automated: false
  contest: false

subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
    Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Based on the bug report.
  name: Catalina

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this
    section by explaining what happened between the VCCs and the fix.
  answer:
  commits:
    - commit: 07dc0ea2745f0afab6415f22b16a29f1c6de5727
      note: This commit occurred about a month earlier and included two fixes,
        one for CVE-2017-12615 and the other for CVE-2017-12616. The change altered
        some files outside of the CVE-2017-12617 fix commit. Most of the changes were
        to check if files existed before executing some of the code as part of the
        fix for CVE-2017-12616.
    - commit:
      note:

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies: true
    note: This vulnerability came about due to certain configurations being used.
      After reading the bug report, the popular opinion is that the readonly parameter
      should always be set to true, but it seems like people set it to false anyways.
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: I wouldn't really call it a mistake, but I find it strange that
    there is a setting for the readonly parameter since most, if not all, people
    would want it be set to true. I am guessing that it was relevant in the past
    and they need to maintain that setting for previous technologies. I would say
    this is a form of miscommunication since the people who are exposing themselves
    to this exploit don't have a complete understanding of what the settings do.
    
    The lesson to be learned here is to always review the code when introducing
    new systems and to update documentation so that users can understand what
    each configuration does even if it may be considerd old or not as relevant.
