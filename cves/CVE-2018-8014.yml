CVE: CVE-2018-8014

nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname:

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 1188

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true

reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 2018-05-01

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2018-05-16

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Default settings for the CORS filter within some versions of Apache Tomcat would 
  default result in a bypass of security protocols. Although these defaults were 
  usually reconfigured by users, some states of the system would keep the defaults.

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced: 2018-05-16 
  url:
bugs: []
fixes_vcc_instructions: |
  Please put the Git commit SHA in "commit" below, and any notes about how this
  was discovered in the "note" field.
  Refer to our instructions on how to find a Git SHA from an SVN revision.
fixes:
   - commit: d83a76732e6804739b81d8b2056365307637b42d
     note: |
      SVN rev 1831726, from the Tomcat website. This made direct fixes to the CorsFilter
      java file and string properties along with tests for each file. Latest version.
   - commit: 60f596a21fd6041335a3a1a4015d4512439cecb5
     note: |
      SVN rev 1831728, from the Tomcat website. This fix was the same as above but for 
      8.5.x.
   - commit: 5877390a9605f56d9bd6859a54ccbfb16374a78b
     note: |
      SVN rev 1831730, from the Tomcat website. Same fix as one above but for version
      7.0.x.
   - commit:
     note:
vccs:
  - commit:
    note:
  - commit:
    note:

incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability?
  Please list any fix commits for this vulnerability that had to be corrected
  at a later date.
incomplete_fixes:
  - commit: d83a76732e6804739b81d8b2056365307637b42d
    note: |
      The 3 fixes above were for all 3 versions this vulnerability affected. There 
      were no later fixes made to fix mistakes.(SVN rev 1831726, from the Tomcat website).
  - commit:
    note:

upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: |
    There were unit tests for the CORS filter although they were not testing for
    the two attribute values that caused the vulnerability. The unit tests were 
    revised to check that attributes would never have conflicting values and the 
    new value added to fix the issue was correct during different situations.
  code: true
  fix: true

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found.
    * Answer in longform below in "answer"
    * Fill in the date in YYYY-MM-DD
    * If it's clear that the vulnerability was discovered by a contest,
      fill in the name there.
    * The "automated" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you
    may leave the entries blank except for "answer", BUT please write down
    where you looked in "answer".
  answer: |
    The discovery of the issue came from a developer named Jianjun Chen who 
    recognized the mistake as it has caused similar security problems in the
    past.
  date: 2018-05-01
  automated: false
  contest:

subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
    Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: |
    The vulnerability lies in the CorsFilter.java file which implements the parent
    class Filter. These filters are used in the catalina subsystem which provides 
    Tomcat with a servlet container.
  name: "Catalina"

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this
    section by explaining what happened between the VCCs and the fix.
  answer:
  commits:
    - commit: "N/A"
      note: |
        There were no interesting commits within the fixes of this vulnerability.
        Although what was found to be interesting was how the initial discovery of 
        as the initial note for the issue was not acknowledged by the Tomcat developers,
        as the note was posted on a public bug tracker. Once the the issue was resolved
        the note was acknowledged. This can be found at the link below.
        https://bz.apache.org/bugzilla/show_bug.cgi?id=62343#c0
    - commit:
      note:

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies: true
    note: |
      This applies to secure by default, as this issue was not directly addressed
      in the code until it was found to be an issue. It was assumed that the default 
      values would have been configured differently by user and there wouldn't be a 
      problem. This leaves a lesson to be learned by showing that it should not be 
      assumed that the correct order of steps anticipated will happen every time.
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    After researching this vulnernability, I believe that this was a coding 
    mistake where the default values for the filter properties would allow a 
    bypass of security. This may have been just a small oversight made by a 
    developer and was not picked up by anyone reviewing their code, but this 
    could have still caused large problems for Tomcat users. The only mitigation 
    that is listed on the CWE is maintenance, as I believe the the developers 
    were doing, the issue was noticed and fixed. Although more detailed testing
    could have also prevented this.