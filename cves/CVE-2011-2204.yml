CVE: CVE-2011-2204

nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname:

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 200

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true

reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 2011-05-31

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2011-06-29

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  In Apache Tomcat, you can use a MemoryUserDatabase to load defined users, groups,
  and roles into an in-memory data structure. The way Tomcat has implemented this
  functionality is through an MBean from Java Management Extensions (JMX). JMX is
  a built-in Java technology that provides an architecture for dynamically
  managing resources by making the overall system more configurable. In this
  context, an MBean is a "managed bean" and is being used to represent an in-memory
  database of users, MemoryUserDatabaseMBean. In older versions of Tomcat, when
  using a MemoryUserDatabase to create users, an unauthorized local user can access
  sensitive user information (e.g. passwords) in local logs. This is because
  sensitive user data is not filtered out when logging error information. In fact,
  the entire User object is being written to the log file in the event of a runtime
  error. As a result, a malicious local user can obtain sensitive information by
  causing a runtime error and then reading the log file. Though this vulnerability
  only discloses sensitive information in logs on the server-side, if an attacker
  were able to gain local file access to the server through some other means or if
  they were able to exploit some other Tomcat file-reading vulnerability, they could
  feasibly read from that log file and have unauthorized access to that sensitive
  user information.

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced: 2011-06-29
  url:
bugs: []
fixes_vcc_instructions: |
  Please put the Git commit SHA in "commit" below, and any notes about how this
  was discovered in the "note" field.
  Refer to our instructions on how to find a Git SHA from an SVN revision.
fixes:
  - commit: 8b81c8c869987e35deed04993ecfcf7be27ca298
    note: SVN rev 1140072, from the Tomcat website. This is in the Tomcat55 repo
  - commit: 763a56b45999653ce648a18462b8a826809215b1
    note: SVN rev 1140072, from the Tomcat website. This is in the standard tomcat (not Tomcat80, not Tomcat55) repo
vccs:
  - commit: 2ee172f418591edd61cfd3dc9676753b281d1fe2
    note: SVN rev 301082, from the Tomcat website. This is in the Tomcat55 repo
  - commit: a84fabcbc6fee8a69253ad92a304b4718e96a7c9
    note: SVN rev 389146, from the Tomcat website, This is in the standard tomcat repo

incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability?
  Please list any fix commits for this vulnerability that had to be corrected
  at a later date.
incomplete_fixes:
  - commit:
    note:
  - commit:
    note:

upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 2

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: |
    Looking around the repository for both Tomcat55 and standard Tomcat, there
    seems to be no dedicated unit tests specifically around the exception
    handling of MemoryUserDatabaseMBean.java when calling createUser(). Adding
    an automated test to ensure that only the user's username was written to
    log in the event of an error would have helped catch this vulnerability.
  code: false
  fix: false

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found.
    * Answer in longform below in "answer"
    * Fill in the date in YYYY-MM-DD
    * If it's clear that the vulnerability was discovered by a contest,
      fill in the name there.
    * The "automated" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you
    may leave the entries blank except for "answer", BUT please write down
    where you looked in "answer".
  answer: |
    There is no evidence as to how this vulnerability was found. First, I
    checked the bug report for this CVE entry on nvd.nist.org, then the same
    for cve.mitre.org, and exchange.xforce.ibmcloud.com but found no
    conversations regarding how the bug was actually found. After this dead
    end, I decided to check the revision messages -- maybe that would give me
    some insight? Since this CVE dates back to before the Tomcat project
    migrated to Git, I checked the SVN revisions in both the Tomcat55 and
    standard Tomcat repositories. The vulnerability existed in 
    MemoryUserDatabaseMBean.java and so I checked the revision messages and
    code diffs for each revision that included this file until the revision
    that ultimately fixed it. In both repositories, the file was unchanged from
    when it was initially added until the revision that fixed the vulnerability.
    In other words, I found nothing there either about how this was found.
  date:
  automated:
  contest:

subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
    Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: org.apache.catalina.mbeans
  name: mbeans

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this
    section by explaining what happened between the VCCs and the fix.
  answer: |
    No, this file was relatively untouched between the VCC and its fix in both
    repos. In the case of the 5.5.x version, that was a total of ~9 years.
  commits:
    - commit:
      note:
    - commit:
      note:

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
  fail_securely:
    applies: true
    note: |
      Having errors/exceptions just print out full stack traces can be very useful
      for a developer trying to debug. However, especially in the case of sensitive
      user data, the contents of these traces should be considered when this is the
      case for production code. This vulnerability is less severe than it could be
      given that the server is only writing it out to local log files, but the data
      can still be exposed if these logs are able to be read by a local attacker.

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    In my opinion, the mistake made here by the developer was a very simple and
    straightforward coding and requirements oversight. Generally when logging,
    you as a developer want as much useful information as possible to help you
    debug. As such, it's likely the developer assumed it would be fine to write
    the entire User object to log in the event of a runtime error, instead of
    only writing out the username. I mean, how often would this exception be
    thrown? Who would even try to read the logs other than the developers? Who
    would know to look? The developer likely did not think of these possibilities
    and went with the conceptually simpler "print the whole object" approach
    instead of taking the time to consider logging only the information needed.
