CVE: CVE-2018-1304

nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname:

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 284

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 0

reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 2018-01-31

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2018-02-28

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  The vulnerability exists in the way Apache Tomcat handles empty
  string URLs that map to the context root of an application.
  An empty string URL is "". The context root of an application determines
  which URLs Tomcat will delegate to the application. For example, if the context root
  of the application is "example", any requests for /example will be handled.
  An application can define certain security constrains to an empty string
  URL that maps to the application's context root to protect the resources within.
  However, Apache Tomcat handles the the empty string URL incorrectly. Hence,
  when an attacker exploits this vulnerability, he or she can gain access to the
  applications's protected resources via unsecured network requests. All the
  defined security constrains are unfortunately ignored.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced: 2018-02-28
  url:
bugs: []
fixes_vcc_instructions: |
  Please put the Git commit SHA in "commit" below, and any notes about how this
  was discovered in the "note" field.
  Refer to our instructions on how to find a Git SHA from an SVN revision.
fixes:
   - commit: 723ea6a5bc5e7bc49e5ef84273c3b3c164a6a4fd
     note: Checks to see if the empty string URL maps to the context root.
   - commit: 5af7c13cff7cc8366c5997418e820989fabb8f48
     note: Checks to see if the empty string URL maps to the context root.
   - commit: 2d69fde135302e8cff984bb2131ec69f2e396964
     note: Checks to see if the empty string URL maps to the context root.
vccs:
  - commit: f34455d975e8d7b78a36c15c07bcf4019a211793
    note: |
      Fix issue regarding finding security constrains when uri is "null"
  - commit: 95d7a0fb011c606b6278954abb296d0c61af682e
    note: |
      Fix issue regarding overlapping URL patterns being merged incorrectly in
      security constrains, leading to 401 responses
incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability?
  Please list any fix commits for this vulnerability that had to be corrected
  at a later date.
incomplete_fixes:
  - commit:
    note:
  - commit:
    note:

upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 0

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: |
    There are not any mentions of tests or updates of tests in the commit messages.
    There are not any files regarding testing updated or changed. There's a link
    to a website that introduces the patch, but does not mention anything on the
    fix has been unit tested.
  code: false
  fix: false

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found.
    * Answer in longform below in "answer"
    * Fill in the date in YYYY-MM-DD
    * If it's clear that the vulnerability was discovered by a contest,
      fill in the name there.
    * The "automated" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you
    may leave the entries blank except for "answer", BUT please write down
    where you looked in "answer".
  answer:  |
    The vulnerability is publicly reported on Apache's Bugzilla with id 62067.
    Developers are able to reproduce the bug by hand.
    Link: https://bz.apache.org/bugzilla/show_bug.cgi?id=62067
  date: 2018-01-31
  automated: true
  contest: false

subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
    Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: |
    Based on the path names of files and bug reports on Red Hat.
    Link: https://bz.apache.org/bugzilla/show_bug.cgi?id=62067
  name: Catalina

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this
    section by explaining what happened between the VCCs and the fix.
  answer: These commits are between VCCs' commits and fixes' commits.
  commits:
    - commit: 7e30da3ae6e42dd5ff1c6ae7b736385a4f6ac290
      note: |
        The developer removes a lot of code regarding credentials and security
        encryption. This might relate to how the vulnerability arises.

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      The vulnerability involves a lack of additional user authorization checks
      or restriction methods for protected resources in case an unauthorised user
      exploits the vulnerability.
  least_privilege:
    applies: true
    note: |
      The vulnerability is granting resources' access to unauthorised users due to
      the incorrect way empty string URLs are handled. Every user should
      be given the least privilege to resources in the application based on his
      or her role.
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    Although the fixes are not involving large coding efforts, but the harm is
    very high as confidential resources are exposed to attackers. The coding mistake
    involves lack of validation for empty string URLs that map to
    the context root of an application, allowing attackers to make unsecure network
    requests and still gains access to protected resources. For example, the attacker
    can set an empty string URL to the ROOT context of application, makes
    HTTP requests instead of HTTPS requests, and gets access to protected resources.
    The vulnerability violates confidentiality.
